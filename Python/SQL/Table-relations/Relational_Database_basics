Relational Databases
Let's say that you've been hired by a big and important company to do the payroll for all of their employees. We'll call it MyFace (inspired by nothing in particular). Every two weeks, you need to look up each and every employee and how much they get paid, and send them a check and send a notice of that check to their manager (managers, after all, should know when their employees are getting paid).

In addition, let's say that managers get paid every month, instead of every two weeks. So, once a month we need to go through the spreadsheet again, find just the managers, and send them their checks. In such a situation, we would need a place to store all of the managers and employees.

Using a spreadsheet, your storage system might look something like this:

Payroll Spreadsheet

So every two weeks, we would have to look through every single entry in this spreadsheet, send each person their check, and then figure out a way to identify an employee's manager to send that manager a confirmation that each employee has been paid. We need some way to associate the employees to their manager.

We could add a "Manager" column to the spreadsheet that would be filled out with the name of that person's manager (if that person is an employee and not a manager themselves). This is getting messy. Not only do we have to do a lot of searching through the spreadsheet and manual detection of who is an employee and who is a manager, but we also have to match each employee with the name of their manager. If only there was some way to simplify our system!

Enter relational databases. A relational database, simply put, is a database structured to recognize relations among stored items. In such a system, it would be easy to tell an employee that they belong to a certain manager and to tell a manager that they have many employees.

Relational Database Structure
Relational databases have one unique and very powerful feature that allows us to establish relationships between multiple tables: primary keys and foreign keys.

Primary Key: a column in a table with an identifier (ID) that uniquely identifies one specific record, or row, in a table
Foreign Key: a column in one table that refers to a primary key in another table
Continuing with our payroll example from earlier, employees and managers would be stored in their own tables. A table is like a spreadsheet; it has columns and rows.

Our managers table would look something like this:

managers table

And our employees table would look something like this:

employees table

Our employees table has a "Manager ID" column, filled with the ID number of that person's manager. In a relational database, every row has a number, called a primary key. Relationships between tables can be established by using a foreign key column, like our "Manager ID" column, that uses that primary key of another table to refer to a member of that table.

In the images above, you can see that in the employees table Bob and Karen both have a value of 1 in the Manager ID column (foreign key). How can we tell who their manager is? We need to look to the other table for that information â€” the managers, and find the manager with the Manager ID (primary key) of 1. That exact process of using a key in one table to identify a corresponding row in another table is what SQL will do for us programatically when we give it the right instructions!

Why should our foreign key, our point of reference between an employee and his or her manager, be a number? Why not just use the manager's name? Well, names are very rarely unique. What if MyFace hires a new manager, also named Steve? It's a popular name, after all. How would our database know which Steve manages which employees. Primary keys, on the other hand, are always unique!
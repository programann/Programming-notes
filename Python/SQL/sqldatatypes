Datatypes
Different database systems also have different datatypes available, which are important and useful to know whenever you are dealing with those systems. SQLite is a good starting point to learn about datatypes because it only has five basic categories of datatypes; they are:

NULL
TEXT
INTEGER
REAL
BLOB
Let's explore each category in more detail.

NULL
In a database, NULL represents "no value", like null in JavaScript or None in Python.

TEXT
Any alphanumeric characters which we want to represent as plain text. The body of this paragraph is text. Your name is text. Your email address is a piece of text. Your height, weight, and age, however, are probably not.

INTEGER
Anything we want to represent as a whole number. If it's a number and contains no letter or special characters or decimal points then we should store it as an integer. If we use it to perform math or create a comparison between two different rows in our database, then we definitely want to store it as an integer. If it's just a number, it's generally not a bad idea to store it as an integer. You might never add two house address numbers together, but you might want to sort them numerically. For example, in the preceding case you might want to get the biggest number and not the longest piece of text.

REAL
Anything that's a plain old decimal like 1.3 or 2.25. SQLite will store decimals up to 15 characters long. You can store 1.2345678912345 or 1234.5678912345, but 1.23456789123456789 would only store 1.2345678912345. In other database systems this is called 'double precision.'

With these three types in hand, we are going to be able to work our way through the next several topics, and this whole typing concept is going to quickly become second nature for you.

BLOB
You may encounter the BLOB datatype while you're Googling or doing any further reading on SQLite. For now, we will not use BLOB. It is generally used for holding binary data.

Bonus: Note on SQLite
To increase its compatibility with other database engines (e.g. mySQL or PostgreSQL), SQLite allows the programmer to use other common datatypes outside of the four mentioned above. We can refer to TEXT INTEGER REAL BLOB as datatype "categories". All other common datatypes are lumped into one of the four existing datatypes recognized by SQLite.

For example, INT is a common datatype used outside of SQLite. SQLite won't complain if you define a column as an INT datatype. It will simply lump it into the INTEGER category and store it as such.

Boolean values are also stored as integers (0 for false, 1 for true).

To accommodate this, SQLite has a pretty complicated system of categorizing datatypes that involves Storage Classes, Type Affinities, and Datatypes. For a deeper dive, check out the SQLite3 Documentation on DatatypesLinks to an external site.http://www.sqlite.org/datatype3.html

Conclusion
Unlike dynamic languages like Python and JavaScript, SQL enforces strictness when it comes to datatypes. While it does restrict our ability to toss any old data we want into a particular column of a database, these restrictions work to our favor by enforcing consistency and predictability.

Resources
SQL Tutorial - W3SchoolsLinks to an external site.https://www.w3schools.com/sql/
Documentation - SQLiteLinks to an external site.https://www.sqlite.org/docs.html
SQLite - VisualStudio MarketplaceLinks to an external site.https://marketplace.visualstudio.com/items?itemName=alexcvzz.vscode-sqlite
Datatypes in SQLite - SQliteLinks to an external site.http://www.sqlite.org/datatype3.html
SQLite Keywords - SQLiteLinks to an external site.https://www.sqlite.org/lang_keywords.html
ZetCode sqlite3 TutorialLinks to an external site.http://zetcode.com/db/sqlite/